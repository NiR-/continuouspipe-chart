apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ template "continuouspipe.name" . }}
    chart: {{ template "continuouspipe.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: worker
  name: {{ template "continuouspipe.component_name" (dict "Release" .Release "Component" "worker") }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "continuouspipe.name" . }}
        release: {{ .Release.Name }}
        component: worker
    spec:
      restartPolicy: Always
      containers:
        - name: worker
          image: docker.io/continuouspipe/worker:latest
          imagePullPolicy: Always
          command:
            - /usr/local/bin/worker
          env:
            - name: DATABASE_HOST
              value: {{ template "continuouspipe.component_name" (dict "Release" .Release "Component" "database") }}
            - name: DATABASE_NAME
              value: continuouspipe
            - name: DATABASE_PASSWORD
              value: continuouspipe
            - name: DATABASE_USER
              value: continuouspipe
            - name: K8S_WATCHER_URL
              value: http://{{ template "continuouspipe.component_name" (dict "Release" .Release "Component" "k8s-watcher") }}
            - name: LOGSTREAM_URL
              value: https://{{ template "continuouspipe.component_name" (dict "Release" .Release "Component" "logstream") }}
            - name: REDIS_HOST
              value: {{ template "continuouspipe.component_name" (dict "Release" .Release "Component" "redis") }}
            - name: NUM_OF_WORKERS
              value: '2'
            - name: MESSAGE_QUEUES_MAIN_DSN
              value: {{ printf "amqp://guest:guest@%s:5672//?topic=messages&queue=messages" (printf "%s-rabbitmq" .Release.Name | trunc 63 | trimSuffix "-") }}
          envFrom:
            - configMapRef:
                name: {{ template "continuouspipe.component_name" (dict "Release" .Release "Component" "main-config") }}
          volumeMounts:
            - name: runtime-keys
              mountPath: "/runtime/keys"
              readOnly: true
            - name: docker-socket
              mountPath: "/var/run/docker.sock"
      volumes:
        - name: runtime-keys
          secret:
            secretName: {{ template "continuouspipe.component_name" (dict "Release" .Release "Component" "secret-runtime-keys") }}
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
